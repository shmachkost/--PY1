def get_count_char(str_):
    str_ = str_.lower()  # переводим строку в нижний регистр
    list_words = str_.split()  # создаем из строки, которую разделили по пробелам, список слов
    str_ = "".join(list_words)  # создаем из списка слов строку, в которой уже нет пробелов
    list_words2 = str_.split(",")  # создаем из строки, которую разделили по точкам, список слов
    str_ = "".join(list_words2)  # создаем из списка слов строку, в которой уже нет пробелов и запятых
    list_words3 = str_.split(".")  # создаем из строки, которую разделили по точкам, список слов
    str_ = "".join(list_words3)  # создаем из списка слов строку, в которой уже нет пробелов, запятых и точек
    list_words4 = str_.split("!")  # создаем из строки, которую разделили по восклицательным знакам, список слов
    str_ = "".join(list_words4)  # создаем из списка слов строку, в которой уже нет пробелов, запятых, точек и восклицательных знаков
    if str_.isalpha():  # цикл начнет работать, если строка символов состоит из букв
        char_dict = {}  # создаем сначала пустой словарь
        DEFAULT_COUNT = 0  # вводим переменную, которая будет использоваться если в цикле, если буква еще ни разу не встретилась
        for char in str_:
            char_dict[char] = char_dict.get(char, DEFAULT_COUNT) + 1  # добавляем в словарь буквы и считаем их количество
    return char_dict

main_str = """
    Данное предложение будет разбиваться на отдельные слова. 
    В качестве разделителя для встроенного метода split будет выбран символ пробела. На выходе мы получим список отдельных слов. 
    Далее нужно отсортировать слова в алфавитном порядке, а после сортировки склеить их с помощью метода строк join. Приступим!!!!
"""
print(get_count_char(main_str))

char_dict_ = get_count_char(main_str)  # делаем из локальной перемонной глобальную

def get_percent_char(dict_):
    total_count = sum(dict_.values())  # суммируем количество всех букв в словаре
    for char, count in dict_.items():
        dict_[char] = round(count / total_count * 100, 2)  # заменяем количество букв на проценты, округленные до 2 знаков после запятой
    return dict_  # возвращает новый словарь




